/*

Instructions:

just run once and it will just work...  


Auto Start

This exe will add itself to autostart programs when windows boots up 


Automatically Detect Where We Left Off - I.E. the Last Patent We Scraped

It will have a local TXT file containing the patent number of the last patent we scraped






Manually scraping we left off on patent number 5316 in 2017



After pulling the patent number from file of the last patent that was scraped, it will 
add one to that number and enter in the URL of this next patent to be scraped as 
follows: https://patents.google.com/patent/US5316 and it will do this using Winsock 
32 which is part of the Windows 32 API and the code sample we will be basing our secured 
connection on is here: 
https://docs.microsoft.com/en-us/windows/desktop/secauthn/using-sspi-with-a-windows-sockets-client

Once on the patent page, our bot receives the full page source and it needs to parse out 
of that source the first page of text describing the pattern itself - maybe the first 2000 
characters will do; It then needs to create a 800x600 JPEG image containing the text that it 
pulled from the patent file; also, create a txt file containing the full patent description
text and name it "[patent #] - full text.txt"

The bot then needs to connect to a page with a URL that looks as follows: 
https://patentimages.storage.googleapis.com/pages/US5316-0.png and it needs to download that 
image and save it as a JPEG

The end goal is to have the patent number followed by a "-" and then write "image" and have 
that file be the image of the patent drawing saved as a JPEG and then have the patent number 
followed by a "-" and then write "description" also saved as a JPEG.  Then these will all be 
stored in a folder and all we have to do when we feel like looking at patents throughout 
history is double-click on a patent which opens it in Windows photo viewer and then we hit 
the right arrow on a keyboard to then move to the next image in the folder that will be the 
description of that patent and then we hit the right arrow again and we see the photo of the 
next patent and we hit the right arrow again and we see the description of that pattern and 
so on so that we can quickly just tab through the folder glancing at padded names and pictures 
and if anything catches our eye we can skim through the next image which contains the patents 
description and see if that interests us and if not we can keep hitting the right arrow to 
see the next one and we can very rapidly click through them looking for standouts and skipping 
past stuff that is not relevant or of interest.

It will go through one patent at a time scraping these data points but it will need to go 
slowly may be one patent every 10 minutes and it will need to only pull 25 or so patents 
per day so that the server does not hit it with a captcha or an IP ban for two frequent 
requests; also, have a 40 minute delay between requests to help to avoid ip bans as well;




This is to be a desktop-based app that runs in the background and starts up every 
time the computer boots up.  It is to connect to the Internet using Winsock and 
it is to communicate with Google's patent pages using HTTP post and get requests 
in order to browse pages.  It is to be a secured connection so they can talk to 
HTTPS pages using #include <security.h>  //Header file for secured socket 
communications SSPI client and server stuff with authentication; goes with 
secur32.lib




index

our to do list section
variables declarations section
auto start section




nextSection                 our to do list section

    ------to do------
    
    Set it up to read from a local TXT file to get the number of the last patent it scraped
    Create code to connect securely to a website using Winsock and security.h //Header file for secured socket communications SSPI client and server stuff with authentication;goes with secur32.lib
    Create code that connects to Google's patent document URL and gathers a the patent description textNote that it is to parse the raw HTML file searching for the actual patent description text and only pulling that out and inserting that into a string;
    Create code that converts the string containing the patent description into a JPEG that is 800x600 pixels and is named according to the patent number followed by and a hyphen and "Description" and this JPEG needs to put the text as size 12 font and press return each time the text hits the far right edge of the JPEG and it needs to include indentation for eachparagraph in the description text so the HTML containing paragraph related information should be kept when parsing out the description text during that prior step and then save this JPEG into a local folder, creating one if it does not already exist and naming it "patent scraping images"
    Create code that pulls the patent main PNG image from Google server and saves it as a JPEG and names the file according to the patent number followed by a space and a hyphen and then "image"
    
    
    
    
*/





#define _WIN32_WINNT 0x0501            //tells the compiler that this is windowsXP or higher... by telling the compiler this, we gain access to the GetConsoleWindow(); command and the PrintWindow(); command  
                                         //also note that this command MUST be written in BEFORE #include <windows.h>...
                                         
                                       
#include <iostream>
#include <windows.h>
#include <Psapi.h>  //enables us to use the EnumProcesses function which lets us locate all processes with the name My Other Game.exe and close them if they are open - perfect for restarter closing strays...
#include <Shlwapi.h>  //enables us to use the PathIsDirectory function
#include <winsock2.h>  //implements the tcp/ip library for access to commands involving socket based packet sending in realtime using tcp protocol for my realtime communications needs for fightingPits and for realtime remote desktopping...
#include <iomanip>
#include <time.h>    //allows getting system time
#include <math.h>     //allows use of sqrt() function...
#include <graphics.h>      //the header we need to use for creating of windows using borland's winBGlm library...
#include <fstream>     //must include this header in order to access files
#include <wininet.h>    //implements ftp command library for access to commands like InternetOpen and InternetConnect; also had to include this library in "tools">"compiler options">"add these lines to linker" as -lwininet... the library wininet is included with dev C++ in its libraries folder...
#include <GL/gl.h>  //header file for the openGL32 library
#include <GL/glu.h>  //header file for the glu32 library which is the openGL utility library
#include <security.h>  //Header file for secured socket communications SSPI client and server stuff with authentication; goes with secur32.lib

 
 
 
 
bool runProgram = true;
bool printHelloWorld = true;
bool printingHelloWorldProgramWaitingForPrintingHelloWorld = true;
bool printingHelloWorldCompleted = false;
bool closeDownTheProgram = false;
bool printingHelloWorldProgramWaitingForClosingDownTheProgram = false;
bool closingDownTheHelloWorldProgramCompleted = false;





//nextSection                 variables declarations section

bool debuggingPrintingHelloWorld = true;






int main()
{
 
 
 
    //nextSection                 print hello world section 
    
    while (runProgram == true)
    {
 
        if (printHelloWorld == true)
        {
            printHelloWorld = false;
            
            
            if (debuggingPrintingHelloWorld == true)
            {
                 cout << "printing hello world\n";
            }
            
            
            cout << "Hello World!\n";
            system("Pause");   
            
            
            printingHelloWorldCompleted = true;
        }
        
        
        
        
        
        
        
        if (printingHelloWorldProgramWaitingForPrintingHelloWorld == true && printingHelloWorldCompleted == true)
        {
            printingHelloWorldProgramWaitingForPrintingHelloWorld = false;
            
            printingHelloWorldCompleted = false;
            
            
            
            closeDownTheProgram = true;
            
            printingHelloWorldProgramWaitingForClosingDownTheProgram = true;
        }
        
        
        
        
        
        
        
        if (closeDownTheProgram == true)
        {
            closeDownTheProgram = false;
            
            
            if (debuggingPrintingHelloWorld == true)
            {
                 cout << "Closing down the hello world program\n";
            }
            
            
            runProgram = false;
            
            
            closingDownTheHelloWorldProgramCompleted = true;
        }
        
        
        
        
        
        
        
        if (printingHelloWorldProgramWaitingForClosingDownTheProgram == true && closingDownTheHelloWorldProgramCompleted == true)
        {
            printingHelloWorldProgramWaitingForClosingDownTheProgram = false;
            
            closingDownTheHelloWorldProgramCompleted = false;
            
            
            //nothing left to do
        }
        
 
    }
 
   
    return 0;
}



